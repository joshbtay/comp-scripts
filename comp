#!/bin/python
from curses import *
from math import *
from sys import argv
from time import time, sleep
from window_utils.draw import *
from window_utils.progressbar import *
from window_utils.timebar import *
from window_utils.boxframe import *
from window_utils.options import *
from window_utils.textbox import *
from io_utils.diffcheck import *
from queue import Queue, Empty
from threading import Thread
import os
from subprocess import *

#Usage: ./comp [kattis|codeforces|adventofcode] base_url [problemID|contestID] -c
state = "start"
auto_submit = '--no-confirm' in argv
no_term = '--no-term' in argv
platform = argv[1]
base_url = argv[2]
id = argv[3]
pid = str(os.getppid())
scr = lambda x:x
rows = cols = 0
start,end=-2,-1
edited = False
timebox=lambda x:x
timebar=lambda x:x
script_path = os.path.dirname(os.path.realpath(__file__))+"/"
running_procs = {}
draw = lambda:0
cache = {}
compiling = False
view_state = ""
problem_id = ''

def check_screen():
    global rows, cols, scr
    r,c = scr.getmaxyx()
    if (rows, cols) != (r, c):
        scr.clear()
        rows, cols = r, c
        return True
    return False

def contest_info():
    info_script = script_path+"web-scripts/" + platform + "_contest_info"
    lines = check_output([info_script, base_url, id]).decode('utf-8').strip().split('\n')
    if len(lines) == 1:
        raise Exception(lines[0])
    if len(lines) == 2:
        state = "waiting"
        t = begin_wait = time()
        start = int(lines[0])
        bar = TimeBar(draw, scr, lambda x: 2, lambda y: 1, lambda x: x-3, lambda y: 1, "green", begin_wait, start)
        box = BoxFrame(draw, scr, lambda x: 0, 0, lambda x: x, lambda y: 3, "green", subtitle="Waiting for contest to start...")
        while t < start:
            check_screen()
            t=time()
            bar.set_ratio((t - begin_wait) / (start - begin_wait))
            box.set_ratio((t - begin_wait) / (0.4))
            scr.refresh()
        lines = check_output([info_script, argv[2], argv[3]]).decode('utf-8').strip().split('\n')
        scr.clear()
    return lines

def enqueue_output(out, queue, pid):
    for line in iter(out.readline, b''):
        if line:
            queue.put(line)
        if not running_procs[pid]:
            break
    out.close()

def testcases(directory):
    inputs = []
    answers = []
    for path in os.listdir(directory):
        if path.endswith(".in"):
            inputs.append(path)
        elif path.endswith(".ans"):
            answers.append(path)
    inputs.sort()
    answers.sort()
    return inputs,answers


def contest():
    global timebox, timebar, start, end
    if "contest_info" in cache:
        info = cache["contest_info"]
    else:
        info = contest_info()
        cache["contest_info"] = info
    assert len(info) > 2
    start,end = map(int,info[:2])
    info = info[2:]
    n=len(info)
    download_script = script_path + "web-scripts/" + platform + "_downloader"
    begin_wait = time()
    downloaders = [Popen([download_script, base_url, problemid], stdout=PIPE, stderr=PIPE,text=True) for problemid in info]
    timebar = TimeBar(draw, scr, 2, lambda y: y-3, lambda x: x-3, 1, "cyan", start, end)
    timebar.set_visible(len(info)>1)
    timebar.done_string = " contest over."
    timebox = BoxFrame(draw, scr, 0, lambda y: y-4, lambda x:x, 3, "cyan", subtitle="time remaining")
    timebox.set_visible(len(info)>1)
    bars = [ProgressBar(draw, scr, 2, i*3+1, lambda x: x-3, 1, "green", "downloading") for i in range(n)]
    zipbars = [ProgressBar(draw, scr, 2, i*3+1, lambda x: x-3, 1, "cyan", "unzipping") for i in range(n)]
    letters = {chr(ord('a')+i):info[i] for i in range(n)}
    boxes = [BoxFrame(draw, scr, 0, i*3, lambda x: x, 3, "green", title=f"[{chr(ord('a')+i)}]:",subtitle=info[i]) for i in range(n)]
    completed = [0]*n
    qs = [Queue() for _ in range(n)]
    ts = [Thread(target=enqueue_output, args=(downloaders[i].stdout, qs[i], f"{i}_downloader")) for i in range(n)]
    for i in range(n):
        running_procs[f"{i}_downloader"] = True
        ts[i].setDaemon(True)
        ts[i].start()
    while True:
        redraw = check_screen()
        t=time()
        for i in range(len(boxes)):
            if downloaders[i].poll() is not None:
                running_procs[f"{i}_downloader"] = False
            boxes[i].set_ratio((t - begin_wait) / (.4) - (0.2*i))
            bars[i].set_ratio(max(min((t-begin_wait) / (2), 0.5), bars[i].ratio))
            if completed[i]==1:
                zipbars[i].set_ratio(max((t-begin_wait) / (3), bars[i].ratio))
            try:
                line = qs[i].get_nowait().strip()
                if line == "no zip":
                    bars[i].done_string = " no test cases."
                    bars[i].set_color("yellow")
                    bars[i].set_ratio(1.1)
                    boxes[i].set_color("yellow")
                    completed[i]=2
                    zipbars[i].visible = False
                elif line == "downloaded":
                    completed[i]=1
                    bars[i].set_ratio(1.1)
                    boxes[i].set_color(zipbars[i].color)
                    boxes[i].redraw()
                elif line == "unzipped":
                    completed[i]=2
                    zipbars[i].set_ratio(1.1)
                else:
                    f = float(line)
                    if completed[i]==0:
                        bars[i].set_ratio(f)
                    else:
                        zipbars[i].set_ratio(f)
            except Empty:
                pass
        key = scr.getch()
        if key != -1:
            if ord('a') <= key <= ord('z') or ord('A') <= key <= ord('Z'):
                c = chr(key).lower()
                if c=="q":
                    quit()
                if c in letters:
                    key=-1
                    problem(letters[c])
                    scr.clear()
                    redraw=True
        if redraw:
            for bar in bars:
                bar.redraw()
            for bar in zipbars:
                bar.redraw()
            for box in boxes:
                box.redraw()
            timebox.redraw()
            timebar.redraw()
        if t > end:
            timebar.set_color("blue")
        timebar.set_ratio((t-start)/(end-start))
        timebox.set_ratio((t-begin_wait) / (.4) - (0.4*n))
        if len(info) == 1 and bars[0].done and zipbars[0].done:
            problem(info[0])
        scr.refresh()


def run_inputs(directory):
    inputs,answers = testcases(directory)
    processes = []
    input_names = []
    for inputfile in inputs:
        input_name = inputfile.rstrip('.in')
        outputfile = directory + input_name + ".out"
        if last_used == "py":
            processes.append(f"Popen(['pypy3', '{directory}run.py'], stdin=open('{directory}{inputfile}'), stdout = open('{outputfile}', 'w'), stderr=PIPE, text=True, preexec_fn=os.setpgrp)")
        elif last_used == 'cpp':
            processes.append(f"Popen(['{directory}run'], stdin=open('{directory}{inputfile}'), stdout = open('{outputfile}', 'w'), stderr=PIPE, text=True, preexec_fn=os.setpgrp)")
        input_names.append(input_name)

    return processes, input_names

def file_watch(dir):
    global edited, last_used, view_state, compiling
    id = problem_id
    lm = {'py': os.path.getmtime(dir+"run.py"), 'cpp':os.path.getmtime(dir+"run.cpp")}
    while True:
        if id != problem_id:
            break
        for suffix, value in lm.items():
            t = os.path.getmtime(dir+"run."+suffix)
            if t != value:
                view_state = "running"
                lm[suffix] = t
                last_used = suffix
                edited = True
                if suffix == "cpp":
                    compiling = True
        sleep(0.1)




def problem(id):
    global last_used, edited, view_state, problem_id, compiling, auto_submit
    problem_id = id
    scr.clear()
    if timebox.visible:
        timebox.set_ratio(1.1)
        timebox.redraw()
        timebar.redraw()
    options = {'c':"++", 'p':"y","v":"iew","r":"un","a":"ll","s":"ubmit", "t":"erm","i":"de", "b":"ack", "q":"uit"}
    problem_dir = f"/home/taylor/code/{platform}/{problem_id}/"
    watcher = Thread(target=file_watch, args=[problem_dir])
    watcher.daemon=True
    watcher.start()
    option = Options(draw, scr, 1, lambda y:y-1, lambda x: x, 1, "white", options)
    confirm = 0
    confirm_option = Options(draw, scr, lambda x:(x-30)//4+25, lambda y:y-subtract, lambda x: (x-30)//2, 1, "white", {'y':'es', 'n':'o'})
    last_used = "py"
    subtract = 5 if timebox.visible else 2
    problem_box = BoxFrame(draw, scr, 0, 0, lambda x:x, lambda y:y-subtract, "cyan", footer="problem: "+problem_id)
    textbox = TextBox(draw, scr, 2, 1, lambda x:x-4, lambda y:y-subtract-2, "default", "no test cases found.")
    inputs,answers = testcases(problem_dir)
    if inputs:
        textbox.set_text(open(problem_dir+inputs[0]).read())
        problem_box.set_title(inputs[0])
        option.last_selected = 'v'
    dual_boxes = [
        BoxFrame(draw, scr, 0, 0, lambda x:x//2, lambda y:y-subtract, "cyan"),
        BoxFrame(draw, scr, lambda x:x//2, 0, lambda x:x-x//2, lambda y:y-subtract, "cyan", footer="problem: "+problem_id)
    ]
    dual_text = [
        TextBox(draw,scr,2, 1, lambda x:x//2-4, lambda y:y-subtract-2, "default", ""),
        TextBox(draw,scr,lambda x: x//2+2, 1, lambda x:(x-x//2)-4, lambda y:y-subtract-2, "default", "")
    ]
    run_processes = []
    run_times = []
    run_status = []
    input_names = []
    run_diffs = []
    j = 0
    edits = 0
    change_view_state = False
    compiler = None
    compile_error = ""
    compiling = False
    
    solve_time = time()
    vr = 0
    dr = 0
    view_state = "input"
    if auto_submit and not no_term:
        Popen(["alacritty", "--working-directory", problem_dir,  "-e", "/usr/bin/nvim", "+1000", "run.py"],stdout=open('/dev/null', 'w'),stderr=open('/dev/null', 'w'), preexec_fn=os.setpgrp)
        option.select('p')
    if auto_submit:
        last_used = "py"
    while True:
        t=time()
        redraw = check_screen()
        key = scr.getch()
        if edited:
            for process in run_processes:
                if process is not None and not isinstance(process, str):
                    process.terminate()
            run_processes, input_names = run_inputs(problem_dir)
            run_times = [0.0]*len(run_processes)
            run_status = ["queued"]*len(run_processes)
            run_diffs = [None]*len(run_processes)
            change_view_state = True
            edited = False
            if compiling:
                if compiler is not None:
                    compiler.terminate()
                compiler = Popen(["g++", "-g", "-O2", "-std=gnu++17", "-static", "-o", problem_dir+"run", "-lrt", "-Wl,--whole-archive", "-lpthread", "-Wl,--no-whole-archive", problem_dir+"run.cpp"], text=True, stderr=PIPE)
            j = 0
            edits +=1
        if key != -1:
            if key==ord('c') or key==ord('C'):
                Popen(["alacritty", "--working-directory", problem_dir,  "-e", "/usr/bin/nvim", "+18", "run.cpp"],stdout=open('/dev/null', 'w'),stderr=open('/dev/null', 'w'), preexec_fn=os.setpgrp)
                last_used = "cpp"
                option.select('c')
            elif key==ord('p') or key==ord('P'):
                Popen(["alacritty", "--working-directory", problem_dir,  "-e", "/usr/bin/nvim", "+1000", "run.py"],stdout=open('/dev/null', 'w'),stderr=open('/dev/null', 'w'), preexec_fn=os.setpgrp)
                last_used = "py"
                option.select('p')
            elif key==ord('i') or key==ord('I'):
                Popen(["code", problem_dir+"/run."+last_used, "--folder-uri", problem_dir],stdout=open('/dev/null', 'w'),stderr=open('/dev/null', 'w'), preexec_fn=os.setpgrp)
                last_used = "py"
                option.select('p')
            elif key==ord('s') or key==ord('S'):
                option.select('s')
                confirm = inf
            elif key==ord('r') or key==ord('R'):
                if not edits:
                    edited = True
                if option.last_selected == 'r':
                    dr += 1
                else:
                    dr = 0
                option.select('r')
                view_state = "diff"
                change_view_state = True
                redraw = True
            elif key==ord('a') or key==ord('A'):
                if option.last_selected == 'a' or not edits:
                    edited = True
                option.select('a')
                view_state = "running"
                change_view_state = True
            elif key==ord('t') or key==ord('T'):
                Popen(["alacritty", "--working-directory", problem_dir, "-e", "/usr/bin/zsh"], stdout=open('/dev/null', 'w'), stderr=open('/dev/null','w'), preexec_fn=os.setpgrp)
                option.select('t')
            elif key==ord('q') or key==ord('Q'):
                quit()
            elif key==ord('b') or key==ord('B'):
                break
            elif key==ord('v') or key==ord('V'):
                inputs, answers = testcases(problem_dir)
                if option.last_selected == 'v':
                    vr +=1
                else:
                    vr = 0
                option.select('v')
                scr.clear()
                redraw=True
                view_state = "input"
                if inputs:
                    textbox.set_text(open(problem_dir+inputs[vr%len(inputs)]).read())
                    problem_box.set_title(inputs[vr%len(inputs)])
            elif ord('0') <= key <= ord('9'):
                if not edits:
                    edited = True
                dr = key - ord('0')
                option.select('r')
                view_state = "diff"
                change_view_state = True
                redraw = True
            elif confirm and (key == ord('y') or key == ord('Y')):
                confirm_option.select('y')
                confirm = t
                Popen([script_path + f"web-scripts/{platform}_submit", f"{problem_dir}/run.{last_used}", problem_id, base_url, pid], stderr=open('/dev/null', 'w'), stdout=open('/dev/null', 'w'), preexec_fn=os.setpgrp)
            elif confirm and (key == ord('n') or key == ord('N')):
                confirm_option.select('n')
                confirm = t
        if confirm and auto_submit:
            Popen([script_path + f"web-scripts/{platform}_submit", f"{problem_dir}/run.{last_used}", problem_id, base_url, pid], stderr=open('/dev/null', 'w'), stdout=open('/dev/null', 'w'), preexec_fn=os.setpgrp)
            auto_submit = False
            confirm_option.select('y')
            confirm = t

        status_change = False

        if compiling:
            p = compiler.poll()
            if p is not None:
                compiling = False
                if p != 0:
                    run_processes = []
                    compile_error = compiler.stderr.read()
                else:
                    compile_error = ""
                compiler = None
                change_view_state = True

        if j < len(run_processes) and not compiling:
            p=run_processes[j]
            if isinstance(p, str):
                run_processes[j] = eval(p)
                run_status[j] = "\\<cyan_>running\\<clear>"
                p = run_processes[j]
                run_times[j] = time()
                status_change = True
            exit_code = p.poll()
            if exit_code is not None:
                run_times[j] = time() - run_times[j]
                if exit_code == 0:
                    status, left, right = evaluate_output(problem_dir, input_names[j]) if platform != 'aoc' else evaluate_last_line(problem_dir, input_names[j])
                    run_status[j] = status + " " + "\\<itali>\\<dim__>"+str(round(run_times[j], 2))+" s\\<clear>"
                    run_diffs[j] = (left, right)
                else:
                    run_status[j] = "\\<magen>\\<bold_>run time error\\<clear>"
                    _,error = p.communicate()
                    run_diffs[j] = error
                run_processes[j]=None
                j+=1
                status_change = True
            elif (time() - run_times[j] > 2 and not auto_submit):
                run_processes[j].kill()
                run_processes[j] = None
                run_diffs[j] = "Time Limit Exceeded"
                run_times[j] = time() - run_times[j]
                run_status[j] = "\\<yello>\\<bold_>time limit exceeded\\<clear>"
                j+=1
                status_change = True
            if j == len(run_processes):
                if all("no solution" in line or "passed" in line for line in run_status) and run_processes:
                    confirm = inf

        if view_state == "diff":
            if last_used == "cpp" and compile_error and not compiling:
                view_state = "running"
                change_view_state = True
            if change_view_state or status_change:
                panels = 1
                if len(run_diffs):
                    index = dr%len(run_diffs)
                    if isinstance(run_diffs[index], tuple):
                        panels = 2
                        for box, text in zip(dual_text, run_diffs[index]):
                            box.set_text(text)
                        prefix = input_names[index].rstrip('.in')
                        dual_boxes[0].set_title(prefix + ".ans \\<dim__>\\<green>(correct)\\<clear>")
                        dual_boxes[1].set_title(prefix + ".out \\<dim__>\\<magen>(your output)\\<clear>")
                if panels == 1 and not problem_box.visible:
                    problem_box.set_visible(True)
                    problem_box.update()
                    textbox.update()
                elif panels == 2 and problem_box.visible:
                    problem_box.set_visible(False)
                    for i in range(2):
                        dual_boxes[i].update()
                        dual_text[i].update()
                if panels == 1:
                    if len(run_diffs):
                        index = dr%len(run_diffs)
                        if run_diffs[index] is None:
                            problem_box.set_title(f"{input_names[index]}.in queued" if run_status[index] == "queued" else f"{input_names[index]}.in running")
                            textbox.set_text("")
                        else:
                            problem_box.set_title(f"Error running {input_names[index]}.in")
                            textbox.set_text(run_diffs[index])
            if problem_box.visible:
                problem_box.update()
                textbox.update()
            else:
                for i in range(2):
                    dual_boxes[i].set_ratio((t-solve_time)/0.4-i*0.4)
                    dual_text[i].update()
        if view_state == "input":
            if change_view_state:
                problem_box.set_visible(True)
            problem_box.set_ratio((t-solve_time)/0.4)
            textbox.update()
        if view_state == "running":
            if change_view_state:
                problem_box.set_visible(True)
                if compile_error and last_used == "cpp" and not compiling:
                    problem_box.set_title("Compile error")
                    textbox.set_text(compile_error)
                    textbox.update()
                else:
                    problem_box.set_title(f"Testing run.{last_used}" if not compiling else "Compiling run.cpp")
                status_change = True
            if status_change:
                if run_processes:
                    textbox.set_text('\n'.join(f"{input_names[i]}.in: {run_status[i]}" for i in range(len(run_processes))))

        option.update()
        if confirm:
            confirm_option.update()
            draw.drawstring(rows-subtract, 1, "would you like to submit?", "white", italic=True)
            if t - confirm > .2:
                confirm = 0
                redraw = True
        if redraw:
            scr.clear()
            if timebar.visible:
                timebar.redraw()
                timebox.redraw()
            if problem_box.visible:
                problem_box.redraw()
                textbox.redraw()
            else:
                for i in range(2):
                    dual_boxes[i].redraw()
                    dual_text[i].redraw()
        change_view_state=False
        scr.refresh()
    problem_id=''

def main(screen):
    global state, scr, rows, cols, draw, cache
    cache = {}
    scr = screen
    #setup
    scr.clear()
    scr.scrollok(False)
    use_default_colors()
    curs_set(0)
    screen.nodelay(1)
    rows, cols = scr.getmaxyx()
    draw = Draw(scr)
    competition = "-c" in argv
    if not competition:
        cache["contest_info"] = ["1", "2", id]
    contest()

wrapper(main)
